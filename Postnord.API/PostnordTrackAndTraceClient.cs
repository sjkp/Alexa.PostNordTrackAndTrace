//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Postnord.API
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostnordTrackAndTraceClient
    {
        private string _baseUrl = "https://api2.postnord.com/rest/shipment/v2/trackandtrace";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PostnordTrackAndTraceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Track shipment by Identifier</summary>
        /// <param name="returntype">Defines the response message format (json or xml)</param>
        /// <param name="apikey">The unique consumer (client) identifier 32 characters</param>
        /// <param name="id">Shipment or Item identifier. Valid characters: 'A-Z', 'a-z', 0-9 Length: 10-35 characters</param>
        /// <param name="locale">Default is en. Allowed values are en, sv, no, da and fi</param>
        /// <param name="callback">Return JSON-P response</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseDto> RestShipmentV2TrackandtraceFindByIdentifierByReturntypeGetAsync(Returntype2 returntype, string apikey, string id, string locale = null, string callback = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (returntype == null)
                throw new System.ArgumentNullException("returntype");

            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/findByIdentifier.{returntype}?");
            urlBuilder_.Replace("{returntype}", System.Uri.EscapeDataString(ConvertToString(returntype, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (locale != null)
            {
                urlBuilder_.Append("locale=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null)
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseDto);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseDto>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The PostNord Track Shipment API supports different ways to retrieve shipment information. <br><br>The same API is used on all PostNord\u2019s websites (e.g. postnord.se, postdanmark.dk, postnord.no and postnord.fi).<br><br>The result will contain the matching shipments with their associated events<br><br>Version 2; Added response attribute returnDate (\"string\",\"date-time\")", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The server experienced a runtime exception while processing the request. Try again later or contact customer support.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Track shipment by notification phonenumber and code</summary>
        /// <param name="returntype">Defines the response message format (json or xml)</param>
        /// <param name="apikey">The unique consumer (client) identifier 32 characters</param>
        /// <param name="notificationPhoneNumber">SMS phone number associated with the shipment.
        ///  Valid characters: '0-9', '-', ' ', '+' and '/'</param>
        /// <param name="notificationCode">Numeric value, length 4</param>
        /// <param name="locale">Default is en. Allowed values are en, sv, no, da and fi</param>
        /// <param name="callback">Return JSON-P response</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseDto> RestShipmentV2TrackandtraceFindByNotificationCodeByReturntypeGetAsync(Returntype3 returntype, string apikey, string notificationPhoneNumber, string notificationCode, string locale = null, string callback = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (returntype == null)
                throw new System.ArgumentNullException("returntype");

            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (notificationPhoneNumber == null)
                throw new System.ArgumentNullException("notificationPhoneNumber");

            if (notificationCode == null)
                throw new System.ArgumentNullException("notificationCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/findByNotificationCode.{returntype}?");
            urlBuilder_.Replace("{returntype}", System.Uri.EscapeDataString(ConvertToString(returntype, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("notificationPhoneNumber=").Append(System.Uri.EscapeDataString(ConvertToString(notificationPhoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("notificationCode=").Append(System.Uri.EscapeDataString(ConvertToString(notificationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (locale != null)
            {
                urlBuilder_.Append("locale=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null)
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseDto);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseDto>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The server did not understand or could not validate the input parameters. More information about the cause of the error is available in the compositeFault object.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The server experienced a runtime exception while processing the request. Try again later or contact customer support.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Track shipment by customer number and reference</summary>
        /// <param name="returntype">Defines the response message format (json or xml)</param>
        /// <param name="apikey">The unique consumer (client) identifier 32 characters</param>
        /// <param name="customerNumber">The Postnord customer number for the shipment</param>
        /// <param name="referenceValue">The customer reference on the shipment</param>
        /// <param name="locale">Default is en. Allowed values are en, sv, no, da and fi</param>
        /// <param name="callback">Return JSON-P response</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseDto> RestShipmentV2TrackandtraceFindByReferenceByReturntypeGetAsync(Returntype4 returntype, string apikey, string customerNumber, string referenceValue, string locale = null, string callback = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (returntype == null)
                throw new System.ArgumentNullException("returntype");

            if (apikey == null)
                throw new System.ArgumentNullException("apikey");

            if (customerNumber == null)
                throw new System.ArgumentNullException("customerNumber");

            if (referenceValue == null)
                throw new System.ArgumentNullException("referenceValue");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/findByReference.{returntype}?");
            urlBuilder_.Replace("{returntype}", System.Uri.EscapeDataString(ConvertToString(returntype, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("apikey=").Append(System.Uri.EscapeDataString(ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("customerNumber=").Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("referenceValue=").Append(System.Uri.EscapeDataString(ConvertToString(referenceValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (locale != null)
            {
                urlBuilder_.Append("locale=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null)
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseDto);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseDto>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The server did not understand or could not validate the input parameters. More information about the cause of the error is available in the compositeFault object.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<object>("The server experienced a runtime exception while processing the request. Try again later or contact customer support.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Returntype
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,

        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MoneyDto
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MoneyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoneyDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StatusTextDto
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimatedTimeOfArrival { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StatusTextDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusTextDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fault
    {
        [Newtonsoft.Json.JsonProperty("faultCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FaultCode { get; set; }

        [Newtonsoft.Json.JsonProperty("explanationText", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExplanationText { get; set; }

        [Newtonsoft.Json.JsonProperty("paramValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParamValue> ParamValues { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Fault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fault>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalServiceDto
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("nameKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameKey { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AdditionalServiceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalServiceDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentStatusTextDto
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstimatedTimeOfArrival { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ShipmentStatusTextDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentStatusTextDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NotificationPartyDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NotificationPartyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationPartyDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AcceptorDto
    {
        [Newtonsoft.Json.JsonProperty("signatureReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureReference { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AcceptorDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AcceptorDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsigneeDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDto Customer { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsigneeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsigneeDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = "CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AVAILABLE_FOR_DELIVERY")]
        AVAILABLE_FOR_DELIVERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = "AVAILABLE_FOR_DELIVERY_PAR_LOC")]
        AVAILABLE_FOR_DELIVERY_PAR_LOC = 2,

        [System.Runtime.Serialization.EnumMember(Value = "DELAYED")]
        DELAYED = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERED")]
        DELIVERED = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_IMPOSSIBLE")]
        DELIVERY_IMPOSSIBLE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_REFUSED")]
        DELIVERY_REFUSED = 6,

        [System.Runtime.Serialization.EnumMember(Value = "EXPECTED_DELAY")]
        EXPECTED_DELAY = 7,

        [System.Runtime.Serialization.EnumMember(Value = "INFORMED")]
        INFORMED = 8,

        [System.Runtime.Serialization.EnumMember(Value = "EN_ROUTE")]
        EN_ROUTE = 9,

        [System.Runtime.Serialization.EnumMember(Value = "OTHER")]
        OTHER = 10,

        [System.Runtime.Serialization.EnumMember(Value = "RETURNED")]
        RETURNED = 11,

        [System.Runtime.Serialization.EnumMember(Value = "STOPPED")]
        STOPPED = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SplitStatusDto
    {
        [Newtonsoft.Json.JsonProperty("noItemsWithStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoItemsWithStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("noItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoItems { get; set; }

        [Newtonsoft.Json.JsonProperty("statusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status? Status { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SplitStatusDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SplitStatusDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = "g")]
        G = 0,

        [System.Runtime.Serialization.EnumMember(Value = "kg")]
        Kg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightDto
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit Unit { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static WeightDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeightDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressDto
    {
        [Newtonsoft.Json.JsonProperty("street1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street1 { get; set; }

        [Newtonsoft.Json.JsonProperty("street2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AddressDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "INFO_ID")]
        INFO_ID = 0,

        [System.Runtime.Serialization.EnumMember(Value = "REF_ID")]
        REF_ID = 1,

        [System.Runtime.Serialization.EnumMember(Value = "UNDEF")]
        UNDEF = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemRefDto
    {
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type? Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemRefDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemRefDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResponseDto
    {
        [Newtonsoft.Json.JsonProperty("trackingInformationResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingInformationResponse TrackingInformationResponse { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ResponseDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status18
    {
        [System.Runtime.Serialization.EnumMember(Value = "CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AVAILABLE_FOR_DELIVERY")]
        AVAILABLE_FOR_DELIVERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DELAYED")]
        DELAYED = 2,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERED")]
        DELIVERED = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_IMPOSSIBLE")]
        DELIVERY_IMPOSSIBLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_REFUSED")]
        DELIVERY_REFUSED = 5,

        [System.Runtime.Serialization.EnumMember(Value = "EXPECTED_DELAY")]
        EXPECTED_DELAY = 6,

        [System.Runtime.Serialization.EnumMember(Value = "INFORMED")]
        INFORMED = 7,

        [System.Runtime.Serialization.EnumMember(Value = "EN_ROUTE")]
        EN_ROUTE = 8,

        [System.Runtime.Serialization.EnumMember(Value = "OTHER")]
        OTHER = 9,

        [System.Runtime.Serialization.EnumMember(Value = "RETURNED")]
        RETURNED = 10,

        [System.Runtime.Serialization.EnumMember(Value = "STOPPED")]
        STOPPED = 11,

        [System.Runtime.Serialization.EnumMember(Value = "SPLIT")]
        SPLIT = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentDto
    {
        [Newtonsoft.Json.JsonProperty("shipmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentId { get; set; }

        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("assessedNumberOfItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssessedNumberOfItems { get; set; }

        [Newtonsoft.Json.JsonProperty("cashOnDeliveryText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashOnDeliveryText { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("originEstimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginEstimatedTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("realTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RealTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedDeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedProductionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedProductionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationPhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationCode { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfPallets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfPallets { get; set; }

        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDto Service { get; set; }

        [Newtonsoft.Json.JsonProperty("consignor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsignorDto Consignor { get; set; }

        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsigneeDto Consignee { get; set; }

        [Newtonsoft.Json.JsonProperty("originalShipper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OriginalShipperDto OriginalShipper { get; set; }

        [Newtonsoft.Json.JsonProperty("freightPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightPayerDto FreightPayer { get; set; }

        [Newtonsoft.Json.JsonProperty("returnParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnPartyDto ReturnParty { get; set; }

        [Newtonsoft.Json.JsonProperty("pickupParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupPartyDto PickupParty { get; set; }

        [Newtonsoft.Json.JsonProperty("collectionParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionPartyDto CollectionParty { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationPartyDto NotificationParty { get; set; }

        [Newtonsoft.Json.JsonProperty("cashOnDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyDto CashOnDelivery { get; set; }

        [Newtonsoft.Json.JsonProperty("statusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentStatusTextDto StatusText { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status18? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedDeliveryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryPointDto RequestedDeliveryPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryPointDto DeliveryPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountDto PaymentAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightDto TotalWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolumeDto TotalVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("assessedWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightDto AssessedWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("assessedVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolumeDto AssessedVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("splitStatuse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SplitStatusDto> SplitStatuse { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReferenceDto> ShipmentReference { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalServiceDto> AdditionalService { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemDto> Items { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ShipmentDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShipmentDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsignorDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("issuercode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issuercode { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDto Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsignorDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsignorDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EventStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = "AVAILABLE_FOR_DELIVERY")]
        AVAILABLE_FOR_DELIVERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = "AVAILABLE_FOR_DELIVERY_PAR_LOC")]
        AVAILABLE_FOR_DELIVERY_PAR_LOC = 2,

        [System.Runtime.Serialization.EnumMember(Value = "DELAYED")]
        DELAYED = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERED")]
        DELIVERED = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_IMPOSSIBLE")]
        DELIVERY_IMPOSSIBLE = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_REFUSED")]
        DELIVERY_REFUSED = 6,

        [System.Runtime.Serialization.EnumMember(Value = "EXPECTED_DELAY")]
        EXPECTED_DELAY = 7,

        [System.Runtime.Serialization.EnumMember(Value = "INFORMED")]
        INFORMED = 8,

        [System.Runtime.Serialization.EnumMember(Value = "EN_ROUTE")]
        EN_ROUTE = 9,

        [System.Runtime.Serialization.EnumMember(Value = "OTHER")]
        OTHER = 10,

        [System.Runtime.Serialization.EnumMember(Value = "RETURNED")]
        RETURNED = 11,

        [System.Runtime.Serialization.EnumMember(Value = "STOPPED")]
        STOPPED = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemDto
    {
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("originEstimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginEstimatedTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("realTimeOfArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RealTimeOfArrival { get; set; }

        [Newtonsoft.Json.JsonProperty("dropOffDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DropOffDate { get; set; }

        [Newtonsoft.Json.JsonProperty("returnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReturnDate { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeliveryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfItem { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfItemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfItemName { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfItemActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfItemActual { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfItemActualName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfItemActualName { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("noItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoItems { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfPallets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfPallets { get; set; }

        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("eventStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventStatus? EventStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("statusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusTextDto StatusText { get; set; }

        [Newtonsoft.Json.JsonProperty("acceptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AcceptorDto Acceptor { get; set; }

        [Newtonsoft.Json.JsonProperty("statedMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasurementDto StatedMeasurement { get; set; }

        [Newtonsoft.Json.JsonProperty("assessedMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasurementDto AssessedMeasurement { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackingEventDto> Events { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReferenceDto> Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("itemRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemRefDto> ItemRefId { get; set; }

        [Newtonsoft.Json.JsonProperty("freeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemFreeTextDto> FreeText { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FreightPayerDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDto Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FreightPayerDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreightPayerDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionPartyDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CollectionPartyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollectionPartyDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LocationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "HUB")]
        HUB = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DEPOT")]
        DEPOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DPD_DEPOT")]
        DPD_DEPOT = 2,

        [System.Runtime.Serialization.EnumMember(Value = "LOAD_POINT")]
        LOAD_POINT = 3,

        [System.Runtime.Serialization.EnumMember(Value = "SERVICE_POINT")]
        SERVICE_POINT = 4,

        [System.Runtime.Serialization.EnumMember(Value = "UNDEF")]
        UNDEF = 5,

        [System.Runtime.Serialization.EnumMember(Value = "CUSTOMER_LOCATION")]
        CUSTOMER_LOCATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = "SLINGA")]
        SLINGA = 7,

        [System.Runtime.Serialization.EnumMember(Value = "DISTRIBUTION_PARTNER")]
        DISTRIBUTION_PARTNER = 8,

        [System.Runtime.Serialization.EnumMember(Value = "IPS_LOCATION")]
        IPS_LOCATION = 9,

        [System.Runtime.Serialization.EnumMember(Value = "POSTAL_SERVICE_TERMINAL")]
        POSTAL_SERVICE_TERMINAL = 10,

        [System.Runtime.Serialization.EnumMember(Value = "DELIVERY_POINT")]
        DELIVERY_POINT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryPointDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("locationDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CoordinateDto> Coordinate { get; set; }

        [Newtonsoft.Json.JsonProperty("openingHour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OpeningHoursDto> OpeningHour { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("servicePointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServicePointType { get; set; }

        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType? LocationType { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DeliveryPointDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeliveryPointDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceDto
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("articleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleNumber { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ServiceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BagDto
    {
        [Newtonsoft.Json.JsonProperty("bag", Required = Newtonsoft.Json.Required.Always)]
        public bool Bag { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BagDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BagDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContactDto
    {
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactName { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhone { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContactDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnPartyDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ReturnPartyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReturnPartyDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("servicePointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServicePointType { get; set; }

        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType? LocationType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static LocationDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CoordinateDto
    {
        [Newtonsoft.Json.JsonProperty("srId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SrId { get; set; }

        [Newtonsoft.Json.JsonProperty("northing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Northing { get; set; }

        [Newtonsoft.Json.JsonProperty("easting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Easting { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CoordinateDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinateDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackingInformationResponse
    {
        [Newtonsoft.Json.JsonProperty("compositeFault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompositeFault CompositeFault { get; set; }

        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentDto> Shipments { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrackingInformationResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingInformationResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Unit34
    {
        [System.Runtime.Serialization.EnumMember(Value = "cm3")]
        Cm3 = 0,

        [System.Runtime.Serialization.EnumMember(Value = "dm3")]
        Dm3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = "m3")]
        M3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VolumeDto
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit34 Unit { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VolumeDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VolumeDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountType
    {
        [System.Runtime.Serialization.EnumMember(Value = "BANKACCOUNT")]
        BANKACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = "UNDEF")]
        UNDEF = 1,

        [System.Runtime.Serialization.EnumMember(Value = "BANKGIRO")]
        BANKGIRO = 2,

        [System.Runtime.Serialization.EnumMember(Value = "PLUSGIRO")]
        PLUSGIRO = 3,

        [System.Runtime.Serialization.EnumMember(Value = "IBAN")]
        IBAN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountDto
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountType AccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bic { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AccountDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Unit38
    {
        [System.Runtime.Serialization.EnumMember(Value = "mm")]
        Mm = 0,

        [System.Runtime.Serialization.EnumMember(Value = "cm")]
        Cm = 1,

        [System.Runtime.Serialization.EnumMember(Value = "dm")]
        Dm = 2,

        [System.Runtime.Serialization.EnumMember(Value = "m")]
        M = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DistanceDto
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit38 Unit { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DistanceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DistanceDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompositeFault
    {
        [Newtonsoft.Json.JsonProperty("faults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Fault> Faults { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CompositeFault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompositeFault>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MeasurementDto
    {
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightDto Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistanceDto Length { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistanceDto Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistanceDto Width { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolumeDto Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("compass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistanceDto Compass { get; set; }

        [Newtonsoft.Json.JsonProperty("compassPlusLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistanceDto CompassPlusLength { get; set; }

        [Newtonsoft.Json.JsonProperty("bag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BagDto Bag { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MeasurementDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MeasurementDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParamValue
    {
        [Newtonsoft.Json.JsonProperty("param", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Param { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ParamValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParamValue>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackingEventDto
    {
        [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventTime { get; set; }

        [Newtonsoft.Json.JsonProperty("eventCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventCode { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LocationDto Location { get; set; } = new LocationDto();

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("eventDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("localEventCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalEventCode { get; set; }

        [Newtonsoft.Json.JsonProperty("scanUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScanUserId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TrackingEventDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingEventDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OriginalShipperDto
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDto Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("issuercode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issuercode { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OriginalShipperDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalShipperDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OpeningHoursDto
    {
        [Newtonsoft.Json.JsonProperty("openFrom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("openTo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenTo { get; set; }

        [Newtonsoft.Json.JsonProperty("openFrom2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpenFrom2 { get; set; }

        [Newtonsoft.Json.JsonProperty("openTo2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpenTo2 { get; set; }

        [Newtonsoft.Json.JsonProperty("monday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Monday { get; set; }

        [Newtonsoft.Json.JsonProperty("tuesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tuesday { get; set; }

        [Newtonsoft.Json.JsonProperty("wednesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Wednesday { get; set; }

        [Newtonsoft.Json.JsonProperty("thursday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Thursday { get; set; }

        [Newtonsoft.Json.JsonProperty("friday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Friday { get; set; }

        [Newtonsoft.Json.JsonProperty("saturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Saturday { get; set; }

        [Newtonsoft.Json.JsonProperty("sunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sunday { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OpeningHoursDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OpeningHoursDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type46
    {
        [System.Runtime.Serialization.EnumMember(Value = "ICN")]
        ICN = 0,

        [System.Runtime.Serialization.EnumMember(Value = "SIC")]
        SIC = 1,

        [System.Runtime.Serialization.EnumMember(Value = "UNDEF")]
        UNDEF = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemFreeTextDto
    {
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type46? Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ItemFreeTextDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemFreeTextDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReferenceDto
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ReferenceDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomerDto
    {
        [Newtonsoft.Json.JsonProperty("productionCustomerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionCustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("externalCustomerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalCustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("sapCustomerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SapCustomerNumber { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CustomerDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupPartyDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PickupPartyDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PickupPartyDto>(data);
        }

    }

    /// <summary>Defines the response message format (json or xml)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Returntype2
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,

        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 1,

    }

    /// <summary>Defines the response message format (json or xml)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Returntype3
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,

        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 1,

    }

    /// <summary>Defines the response message format (json or xml)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Returntype4
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,

        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}